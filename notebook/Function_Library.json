{
	"name": "Function_Library",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "7dd777e6-25a5-437c-b74b-c27b0a1e8055"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Calculate aggragate on grouping clumn based on parameters:\r\n",
					"# df, grouping_column, agg_operation, agg_columns"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"def my_aggregate(df, grouping_column, agg_operation, agg_columns):\r\n",
					"    # exprs = {col_name: \"last\" for col_name in df.columns}\r\n",
					"    # df = df.groupBy(\"Time\").agg(exprs)\r\n",
					"\r\n",
					"    arguments = [agg_operation(col(col_name)).alias(col_name) for col_name in agg_columns]\r\n",
					"    df = df.groupBy(grouping_column).agg(*arguments)\r\n",
					"\r\n",
					"    return df\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Upsert data from df into given sink_path with specified key_column"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def upsert_delta_table(sink_path, df, key_column):\r\n",
					"    try:\r\n",
					"        result = df.write.format(\"delta\").save(sink_path)\r\n",
					"        print('Table does not exist. Created new table.')\r\n",
					"    except:\r\n",
					"        print('Table Found. Updating existing table...')\r\n",
					"        delta_table = DeltaTable.forPath(spark, sink_path)\r\n",
					"\r\n",
					"        result = delta_table.alias(\"target\").merge(\r\n",
					"            df.alias(\"source\"),\r\n",
					"            \"target.\"+key_column+\" = source.\"+key_column) \\\r\n",
					"            .whenMatchedUpdateAll() \\\r\n",
					"            .whenNotMatchedInsertAll() \\\r\n",
					"            .execute()\r\n",
					"    return result\r\n",
					"        "
				],
				"execution_count": null
			}
		]
	}
}