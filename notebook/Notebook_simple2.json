{
	"name": "Notebook_simple2",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "mysparkpool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "e2b84326-2276-4fa1-b273-aaed628cae81"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/b2a378a1-12f1-45ef-b390-81e13240a72f/resourceGroups/myrgp_2023/providers/Microsoft.Synapse/workspaces/my-syn-test/bigDataPools/mysparkpool",
				"name": "mysparkpool",
				"type": "Spark",
				"endpoint": "https://my-syn-test.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/mysparkpool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.functions import year, month, col, to_date, when, last, sum\r\n",
					"from delta.tables import DeltaTable"
				],
				"execution_count": 87
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def my_aggregate(df, grouping_column, agg_operation, agg_columns):\r\n",
					"    # exprs = {col_name: \"last\" for col_name in df.columns}\r\n",
					"    # df = df.groupBy(\"Time\").agg(exprs)\r\n",
					"\r\n",
					"    arguments = [agg_operation(col(col_name)).alias(col_name) for col_name in agg_columns]\r\n",
					"    df = df.groupBy(grouping_column).agg(*arguments)\r\n",
					"\r\n",
					"    return df\r\n",
					""
				],
				"execution_count": 111
			},
			{
				"cell_type": "code",
				"source": [
					"df_Yearly = spark.read.load('abfss://staging@mysynstorage.dfs.core.windows.net/Agva/All_Dates', format='delta', header=True)\r\n",
					"df_Monthly = df_Yearly\r\n",
					"df = df_Yearly"
				],
				"execution_count": 112
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_Yearly = my_aggregate(df_Yearly, 'Year', sum, ['Price','KW_Consumption'])\r\n",
					"df_Monthly = my_aggregate(df_Monthly, 'Month_Name', sum, ['Price','KW_Consumption'])\r\n",
					""
				],
				"execution_count": 113
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(df_Yearly.limit(6))\r\n",
					"display(df_Monthly.limit(6))"
				],
				"execution_count": 114
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sink_path_Monthly_Bill = \"abfss://staging@mysynstorage.dfs.core.windows.net/Agva/Spark_Monthly_Bill\"\r\n",
					"\r\n",
					"try:\r\n",
					"    df.write.format(\"delta\").save(sink_path_Monthly_Bill)\r\n",
					"    print('Table does not exist. Created new table.')\r\n",
					"except:\r\n",
					"    print('Table Found. Updating existing table...')\r\n",
					"    delta_table = DeltaTable.forPath(spark, sink_path)\r\n",
					"\r\n",
					"    result = delta_table.alias(\"target\").merge(\r\n",
					"        df.alias(\"source\"),\r\n",
					"        \"target.Time = source.Time\") \\\r\n",
					"        .whenMatchedUpdateAll() \\\r\n",
					"        .whenNotMatchedInsertAll() \\\r\n",
					"        .execute()\r\n",
					"    \r\n",
					"    print(result)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sink_path_Yearly_Bill = \"abfss://staging@mysynstorage.dfs.core.windows.net/Agva/Spark_Yearly_Bill\"\r\n",
					"\r\n",
					"try:\r\n",
					"    df.write.format(\"delta\").save(sink_path_Yearly_Bill)\r\n",
					"    print('Table does not exist. Created new table.')\r\n",
					"except:\r\n",
					"    print('Table Found. Updating existing table...')\r\n",
					"    delta_table = DeltaTable.forPath(spark, sink_path)\r\n",
					"\r\n",
					"    result = delta_table.alias(\"target\").merge(\r\n",
					"        df.alias(\"source\"),\r\n",
					"        \"target.Time = source.Time\") \\\r\n",
					"        .whenMatchedUpdateAll() \\\r\n",
					"        .whenNotMatchedInsertAll() \\\r\n",
					"        .execute()\r\n",
					"    \r\n",
					"    print(result)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}