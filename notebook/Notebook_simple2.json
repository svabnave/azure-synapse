{
	"name": "Notebook_simple2",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "mysparkpool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "2a950d3d-40e3-4bcc-a482-ea17b9e7e786"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/b2a378a1-12f1-45ef-b390-81e13240a72f/resourceGroups/myrgp_2023/providers/Microsoft.Synapse/workspaces/my-syn-test/bigDataPools/mysparkpool",
				"name": "mysparkpool",
				"type": "Spark",
				"endpoint": "https://my-syn-test.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/mysparkpool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.functions import year, month, col, to_date, when, last, sum\r\n",
					"from delta.tables import DeltaTable"
				],
				"execution_count": 71
			},
			{
				"cell_type": "code",
				"source": [
					"df_Yearly = spark.read.load('abfss://staging@mysynstorage.dfs.core.windows.net/Agva/All_Dates', format='delta', header=True)\r\n",
					"df_Monthly = df_Yearly"
				],
				"execution_count": 83
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# exprs = {col_name: \"last\" for col_name in df.columns}\r\n",
					"# df = df.groupBy(\"Time\").agg(exprs)\r\n",
					"\r\n",
					"columns = df_Yearly.columns\r\n",
					"grouping_column = 'Year'\r\n",
					"arguments = [sum(col(col_name)).alias('Total_'+col_name) for col_name in columns if col_name =='Price' or col_name =='KW_Consumption' ]\r\n",
					"df_Yearly = df_Yearly.groupBy(grouping_column).agg(*arguments)\r\n",
					""
				],
				"execution_count": 84
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# exprs = {col_name: \"last\" for col_name in df.columns}\r\n",
					"# df = df.groupBy(\"Time\").agg(exprs)\r\n",
					"\r\n",
					"columns = df_Monthly.columns\r\n",
					"grouping_column = 'Month_Name'\r\n",
					"arguments = [sum(col(col_name)).alias('Total_'+col_name) for col_name in columns if col_name =='Price' or col_name =='KW_Consumption' ]\r\n",
					"df_Monthly = df_Monthly.groupBy(grouping_column).agg(*arguments)\r\n",
					""
				],
				"execution_count": 85
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(df_Yearly.limit(6))\r\n",
					"display(df_Monthly.limit(6))"
				],
				"execution_count": 86
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# exprs = {col_name: \"last\" for col_name in df.columns}\r\n",
					"# df = df.groupBy(\"Time\").agg(exprs)\r\n",
					"\r\n",
					"grouping_column = 'Year'\r\n",
					"arguments = [sum(col(col_name)).alias('Total_'+col_name) for col_name in df.columns if col_name =='Price' or col_name =='KW_Consumption' ]\r\n",
					"df = df.groupBy(grouping_column).agg(*arguments)\r\n",
					""
				],
				"execution_count": 69
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df = df1.groupBy(\"Year\").sum(\"KW_Consumption\").alias(\"Total_KW_Consumption\"),sum(\"Price\").alias(\"Total_Price\")"
				],
				"execution_count": 33
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df = df1.groupBy(\"Year\").sum(\"KW_Consumption\").alias(\"Total_KW_Consumption\")\r\n",
					"df = df1.groupBy(\"Year\").sum(\"Price\").alias(\"Total_Price\")\r\n",
					"\r\n",
					""
				],
				"execution_count": 28
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"grouping_column = 'Year'\r\n",
					"arguments = [last(col(col_name)).alias(col_name) for col_name in df.columns]\r\n",
					"df = df.groupBy(grouping_column).agg(*arguments)"
				],
				"execution_count": null
			}
		]
	}
}